import numpy as np


table = np.array([ [1, 3, 3, 8, 20],
                   [8, 6, 2, 6, 20],
                   [5, 2, 4, 5, 45],
                   [25, 5, 40, 15, 85],
                   ])
table = np.pad(np.expand_dims(table, axis=2), ((0,0), (0,0), (0,1))) #—Å–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –ø–æ–¥—Ç–∞–±–ª–∏—Ü—É —Å –ø–ª–∞–Ω–æ–º
for i in table[:-1] : i[-1][1] = i[-1][0]
# –≤—ã–≤–æ–¥–∏ –¥–≤–µ –ø–æ–¥—Ç–∞–±–ª–∏—Ü—ã
print("–ò—Å—Ö–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
print(table[:, :, 0])
print(table[:, :, 1])


#~================================================
# —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω
def stage_1(table):
    j = 0
    i = 0
    while j < len(table[0]) - 1 and i < len(table) - 1:
        need = table[:, j][-1][0] - table[:, j][-1][1] #–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ - –æ—Å—Ç–∞—Ç–æ–∫
        resourse = table[i, -1][1]
        if need >= resourse:
            # –µ—Å–ª–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∑–∞–ø–∞—Å
            table[i, j, 1] = resourse
            table[:, j][-1][1] += resourse
            table[i, -1, 1] = 0
            i += 1
        else:
            table[i, j, 1] = need
            table[i, -1, 1] -= need
            table[:, j][-1][1] += need
            j += 1

stage_1(table)
print("========================================")
print("–≠—Ç–∞–ø I. –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –æ–ø–æ—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
# –≤—ã–≤–æ–¥–∏ –¥–≤–µ –ø–æ–¥—Ç–∞–±–ª–∏—Ü—ã
print(table[:, :, 0])
print(table[:, :, 1])
print("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–æ–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç f =", end=" ")
print(sum(sum(table[:-1, :-1, 0] * table[:-1, :-1, 1])))




#~================================================
# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ ‚àÜ
def estimate(table):

    # –î–∞–ª–µ–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
    B = np.concatenate(table[:-1, :-1, 0])
    M = np.zeros(((len(table) - 1) * (len(table[0]) - 1), (len(table) - 1) + (len(table[0]) - 1) ))
    for i in range(len(table) - 1):
        for j in range(len(table[0]) - 1):
            if table[i, j, 1] != 0:
                M[i * (len(table[0]) - 1) + j, i] = 1
                M[i * (len(table[0]) - 1) + j, len(table) - 1 + j] = 1

    M = np.concatenate((M, np.expand_dims(B, 1)), axis=1)
    to_del = []
    for i in range(len(M)):
        if(np.count_nonzero(M[i][:-1]) == 0):
            to_del.append(i)


    # –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–µ–ª—å—Ç—ã –ø–æ —Ñ–æ—Ä–º—É–ª–µ ‚àÜùëñùëó= ùëêùëñùëó ‚àí (ùë¢ùëñ + ùë£ùëó)
    M = np.delete(M, to_del, 0)
    UV = np.linalg.solve(M[:, 1:-1], M.T[-1])
    U = np.concatenate((np.array([0]), UV[:len(table) - 2]), axis=0)
    V = UV[len(table) - 2:]

    deltas = []

    for i in range(len(table) - 1):
        for j in range(len(table[0]) - 1):
            if table[i, j, 1] == 0:
                # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –¥–µ–ª—å—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–º–∏ —è—á–µ–µ–∫
                deltas.append((i, j, table[i, j, 0] - (U[i] + V[j])))
    return deltas



#~================================================
# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É —Å–ª–µ–¥ —è—á–µ–π–∫–∏ —Ü–∏–∫–ª–∞
def get_next(map, start):
    # map - –¢–∞–±–ª–∏—Ü–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞–º–∏
    # —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º -1 –≤ —è—á–µ–π–∫–µ –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ü–∏–∫–ª
    # start - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ü–∏–∫–ª
    next = []
    i, j = start[0], start[1]
    # i, j - —Ö. —É. –ø–æ —Ç–∞–±–ª–∏—Ü–µ
    # –¥–∞–ª–µ–µ –≤ next –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–≤—É—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ü–∏–∫–ª–∞
    while i < len(map):
        if i != start[0]:
            if(map[i][start[1]] != 0):
                next.append((i, start[1]))
                break
        i+=1
    i = start[0]
    while i > -1:
        if i != start[0]:
            if(map[i][start[1]] != 0):
                next.append((i, start[1]))
                break
        i-=1
    while j < len(map[0]):
        if j != start[1]:
            if(map[start[0]][j] != 0):
                next.append((start[0], j))
                break
        j+=1
    j = start[1]
    while j > -1:
        if j != start[1]:
            if(map[start[0]][j] != 0):
                next.append((start[0], j))
                break
        j-=1
    return next


#~================================================
# —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –¥–ª—è —Ä–µ—à–µ–Ω–∏—è
def get_new_circle(point, map, visited):
    # point - –Ω–æ–º–µ—Ä–∞ —è—á–µ–µ–∫ –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Ü–∏–∫–ª
    # map - –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
    # visited - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ ( –Ω–µ –ø–æ–ª–Ω–æ–≥–æ )
    v = [point]
    paths = []
    # get_next - —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É —Å–ª–µ–¥ —è—á–µ–π–∫–∏ —Ü–∏–∫–ª–∞
    for next in get_next(map, point):
        #next - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–µ–¥ —è—á–µ–π–∫–∏ —Ü–∏–∫–ª–∞
        if next == visited[0] and len(visited) > 2:
            paths.append([next])
        elif next not in visited:
            # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            res = get_new_circle(next, map, visited + [next])
            if len(res) > 0 : paths.append(res)
    # paths - –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—É—Ç–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏–∫–ª–∞
    if len(paths) > 0:
        v += min(paths, key=lambda i: len(i))
        # v - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–¥–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ü–∏–∫–ª–∞
        return v
    else: return []


#~================================================
# —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ü–∏–∫–ª–∞
def solve_circle(circle):
    i = 1
    # circle - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–µ–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Ü–∏–∫–ª–∞
    while i < len(circle) - 1:
        if circle[i-1][0] == circle[i][0] == circle[i+1][0]:
            circle.remove(circle[i])
        else:
            i += 1
    j = 1
    while j < len(circle) - 1:
        if circle[j-1][1] == circle[j][1] == circle[j+1][1]:
            circle.remove(circle[j])
        else:
            j += 1
    # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–∏–∫–ª–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —è—á–µ–µ–∫
    return circle


#~================================================
# –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–∫–∞ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ ‚àÜ
def iterate(table):
    iter = 0
    # —Å—á–∏—Ç–∞–µ–º ‚àÜ
    deltas = estimate(table)
    # –ø–æ–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã
    while min(deltas, key=lambda i: i[2])[2] < 0:
        iter += 1

        # –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–± –≤ –∫–æ–Ω—Å–æ–ª—å
        print("\n–ò—Ç–µ—Ä–∞—Ü–∏—è ‚Ññ", iter)
        print("–î–µ–ª—å—Ç—ã")
        for i in range(len(deltas)):
            print(deltas[i][2], end=" ")
        print("\n–î–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print(table[:, :, 0])
        print(table[:, :, 1])




        # –Ω–∞—Ö–æ–¥–∏–º –Ω–∞–∏–º–µ–Ω—å—à—É—é –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        new = min(deltas, key=lambda i: i[2])
        # —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ü–∏–∫–ª–∞
        map = table[:-1, :-1, 1].copy()
        map[new[0], new[1]] = -1
        # –∑–∞–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ç–æ—á–∫—É –¥–ª—è –Ω–∞—á–∞–¥–∞ —Ü–∏–∫–ª–∞
        start = (new[0], new[1])
        # —Å–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª
        circle = get_new_circle(start, map, [start])
        # —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —è—á–µ–µ–∫
        circle = solve_circle(circle)
        #–ù–∞–π–¥–µ–º ùúÜ = min —Ä–∞–≤–Ω–æ–µ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É –∏–∑ —á–∏—Å–µ–ª, —Å—Ç–æ—è—â–∏—Ö –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω–∞—Ö —Ü–∏–∫–ª–∞
        l = map[min(circle[1:-2], key=lambda i: map[i])]
        #–î–≤–∏–≥–∞—è—Å—å –¥–∞–ª–µ–µ –ø–æ –æ–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É, +- ùúÜ
        for i in range(0, len(circle) - 1, 2):
            table[circle[i]][1] += l
            table[circle[i + 1]][1] -= l
        deltas = estimate(table)

        print("–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        print(table[:, :, 0])
        print(table[:, :, 1])
        print("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–æ–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç f =", end=" ")
        print(sum(sum(table[:-1, :-1, 0] * table[:-1, :-1, 1])))



print("============================================")
print("–≠—Ç–∞–ø II. –£–ª—É—á—à–µ–Ω–∏–µ –æ–ø–æ—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
iterate(table)
table[:, :, 1]

print("\n============================================")
print("Plan: ")
print(table[:-1, :-1, 1])
print("Result: ")
print(sum(sum(table[:-1, :-1, 0] * table[:-1, :-1, 1])))